
services:
  postgres:
    image: postgres:15-alpine
    container_name: healthstash-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-healthstash}
      POSTGRES_USER: ${POSTGRES_USER:-healthstash}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - healthstash-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-healthstash}"]
      interval: 10s
      timeout: 5s
      retries: 5

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: healthstash-timescale
    environment:
      POSTGRES_DB: ${TIMESCALE_DB:-healthstash_vitals}
      POSTGRES_USER: ${TIMESCALE_USER:-healthstash}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-changeme}
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./database/timescale_init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - healthstash-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALE_USER:-healthstash}"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: healthstash-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BROWSER: ${MINIO_BROWSER:-off}
    volumes:
      - minio_data:/data
    networks:
      - healthstash-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: healthstash-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-healthstash}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-healthstash}
      TIMESCALE_URL: postgresql://${TIMESCALE_USER:-healthstash}:${TIMESCALE_PASSWORD:-changeme}@timescaledb:5432/${TIMESCALE_DB:-healthstash_vitals}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_SECURE: "false"
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key-change-this}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-change-this}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      MAX_UPLOAD_SIZE_MB: ${MAX_UPLOAD_SIZE_MB:-500}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
      HOST_IP: ${HOST_IP:-host.docker.internal}
      HTTP_PORT: ${HTTP_PORT:-80}
      PUBLIC_URL: ${PUBLIC_URL:-}
    volumes:
      - ./backend:/app
      - backup_data:/backups
    networks:
      - healthstash-network
    depends_on:
      - postgres
      - timescaledb
      - minio
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: healthstash-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - healthstash-network
    depends_on:
      - backend
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: healthstash-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - healthstash-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backup:
    build:
      context: ./backup-scripts
      dockerfile: Dockerfile
    container_name: healthstash-backup
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-healthstash}
      POSTGRES_USER: ${POSTGRES_USER:-healthstash}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      TIMESCALE_HOST: timescaledb
      TIMESCALE_DB: ${TIMESCALE_DB:-healthstash_vitals}
      TIMESCALE_USER: ${TIMESCALE_USER:-healthstash}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD:-changeme}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY:-}
      ENCRYPTION_METHOD: ${ENCRYPTION_METHOD:-openssl}
      ENABLE_MAINTENANCE_MODE: ${ENABLE_MAINTENANCE_MODE:-false}
      ALERT_WEBHOOK_URL: ${ALERT_WEBHOOK_URL:-}
      OFFSITE_BACKUP_ENDPOINT: ${OFFSITE_BACKUP_ENDPOINT:-}
      OFFSITE_TYPE: ${OFFSITE_TYPE:-s3}
      OFFSITE_ACCESS_KEY: ${OFFSITE_ACCESS_KEY:-}
      OFFSITE_SECRET_KEY: ${OFFSITE_SECRET_KEY:-}
      OFFSITE_BUCKET: ${OFFSITE_BUCKET:-}
      OFFSITE_RSYNC_DEST: ${OFFSITE_RSYNC_DEST:-}
      ENABLE_IMMUTABILITY: ${ENABLE_IMMUTABILITY:-false}
    volumes:
      - backup_data:/backups
      - minio_data:/minio-data:ro
    networks:
      - healthstash-network
    depends_on:
      - postgres
      - timescaledb
      - minio
    restart: unless-stopped

networks:
  healthstash-network:
    driver: bridge

volumes:
  postgres_data:
  timescale_data:
  minio_data:
  backup_data:
  nginx_logs: